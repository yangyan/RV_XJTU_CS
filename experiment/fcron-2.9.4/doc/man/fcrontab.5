.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "FCRONTAB" "5" "29 décembre 2003" "12/29/2003" ""

.SH NAME
fcrontab \- tables for driving fcron
.SH "DESCRIPTION"
.PP
A \fBfcrontab\fR is a file containing all tables used by the
\fBfcron\fR(8) daemon. In other words, it is the means for a user to tell the daemon
"execute this command at this moment". Each user has his own \fBfcrontab\fR, whose
commands are executed as his owner (only root can run a job as another using the
option runas (see below)).
.PP
Blank lines, line beginning by a pound-sign (#) (which are
considered comments), leading blanks and tabs are ignored. Each line in a
fcrontab file can be either
.TP 0.2i
\(bu
an environment setting,
.TP 0.2i
\(bu
an option setting,
.TP 0.2i
\(bu
entries based on elapsed system up time,
.TP 0.2i
\(bu
entries based on absolut time (like normal crontab
entries), or
.TP 0.2i
\(bu
entries run periodically.
.PP
Any logical line (an entry or an assignment) can be divided into
several real lines (the lines which end by a newline character) by placing a
backslash (\\) before the newline character (\\n).
.SS "THE ENVIRONMENT SETTINGS"
.PP
The environment settings are of the form
.sp
.RS
.PP
name = value
.RE
.PP
where the blanks around equal-sign (=) are ignored and
optional. Trailing blanks are also ignored, but you can place the value in
quotes (simple or double, but matching) to preserve any blanks in the
value.
.PP
When \fBfcron\fR executes a command, it always sets
\fBUSER\fR, \fBHOME\fR, and \fBSHELL\fR as defined in
\fI/etc/passwd\fR for the owner of the \fBfcrontab\fR from which the
command is extracted. \fBHOME\fR and \fBSHELL\fR may be
overridden by settings in the \fBfcrontab\fR, but \fBUSER\fR may not.
Every other environment assignments defined in the user \fBfcrontab\fR are then
made, and the command is executed.
.PP
Plus, the special variable MAILTO allows
you to tell \fBfcron\fR to whom it has to mail the command's output. Note that
MAILTO is in fact equivalent to a global declaration of the
option mailto (see below). It is only used for backward compatibility, so
you should use the option mailto directly.
.SS "ENTRIES BASED ON ELAPSED SYSTEM UP TIME"
.PP
The entries of commands which have to be run once every m
minutes of \fBfcron\fR's execution (which is normally the same as m minutes of
system's execution) are of the form

.nf
@options frequency command
.fi
.PP
where frequency is a time value of the form
value*multiplier+value*multiplier+...+value-in-minutes as "12h02" or "3w2d5h1".
The first means "12 hours and 2 minutes of fcron execution" while the second
means "3 weeks, 2 days, 5 hours and 1 minute of fcron execution". The only valid
multipliers are:
"VALID TIME MULTIPLIERS"
meaning : multipliers :      months (4 weeks) : m      weeks (7 days) : w      days (24 hours) : d      hours (60 minutes) : h  seconds : s  
.PP
In place of \fIoptions\fR, user can put a
time value : it will be interpreted as
@first(\fI<time>\fR). If first option is
not set, the value of "frequency" is used.
.PP
This kind of entry does not guarantee a time and date of
execution (as the job is delayed at each startup by the time elapsed since the
shutdown), but should be useful for jobs depending on the number of things done
by the users (for instance, the filesystem should better be checked after a
certain amount of use by the users rather than every x days, as the system may
run from 1 day to x days during that x days interval).
.PP
The time remaining before next execution is saved every 1800
seconds (to limit damages caused by a crash) and when \fBfcron\fR exits after having
received a SIGTERM signal, i.e. when systems go down. Thus,
this kind of entries is particularly useful for systems that don't run
regularly. The syntax being very simple, it may also useful for tasks which
don't need to be run at a specific time and date.
.PP
\fBSee also\fR : options first, mail, nolog,
serial, lavg, nice, runas (see below).
.PP
.SS "SOME EXAMPLES OF LINES BASED ON ELAPSED SYSTEM UP TIME"

.nf
# Get our mails every 30 minutes 
@ 30 getmails -all 

# make some security tests every 48 hours of system up time, 
# force a mail to be sent to root even if there is no output 
@mailto(root),forcemail 2d /etc/security/msec/cron-sh/security.sh
.fi
.SS "ENTRIES BASED ON TIME AND DATE"
.PP
The second type of \fBfcrontab\fR's entries begins by an optional
"&", which can be immediately followed by an optional number defining the
frequency of execution (this is equivalent to option runfreq) or a
declaration of options; it has five time and date fields, and a shell command
:

.nf
&options min hrs day-of-month month day-of-week command
.fi
.PP
Note that the shell command may be preceded by a user name,
which is equivalent to runas(\fI<user>\fR): as
it is only here for backward compatibility you should use option runas (see
below) instead. The frequency is interpreted as: "run this command after x
matches of time and date fields". The time and date fields are:
"TIME AND DATE FIELDS"
field : allowed values :      minute : 0-59      hour : 0-23      day of month : 1-31      month : 1-12 (or names, see below)      day of week : 0-7 (0 and 7 are both Sunday, or names)
.PP
A field is always filled by either an asterisk (*), which acts
as "first-last" range, a single number or a list.
.PP
List are numbers or range separated with commas (,). For
instance: "2,5,15,23".
.PP
Ranges of number are of the form
"\fI<begin>\fR-\fI<end>\fR", 
where "\fIbegin\fR" and "\fIend\fR"
are included. For example, "3-5" specifies the values 3, 4 and 5. You can also
add an optional "/\fInumber\fR" to a range, where the
\fInumber\fR specifies skips of the
\fInumber\fR's value through the range. For example,
"0-23/2" can be used in the hours field to specify command execution every other
hour. Finally, one or several "~\fInumber\fR" can be added
to turn off some values in a range. For example, "5-8~6~7" is equivalent to
"5,8". The final form of a field is:
.sp
.RS
.PP
a[-b[/c][~d][~e][...]][,f[-g[/h][~i][~j][...]]][,...]
.RE
.PP
where the letters are integers.
.PP
You can also use an asterisk (*) in a field. It acts for
"first-last". For example, a "*" in the field minute means all
minutes from minute 0 down to minute 59.
.PP
Ranges can be included in a list as a single number. For
instance: "2,5-10/2~6,15,20-25,30".
.PP
Names can also be used for the "month" and "day of week"
fields. To do so, use the first three letters of the particular day or month
(case doesn't matter). Please note that names are used exactly as numbers: you
can use them in a list or a range.
.PP
If a day of month and a day of week are given, the command
will execute only when \fBboth\fR match with the current time and
date unless option dayor is set. For example, with the line

.nf
5 10 31 * 7 echo ''
.fi
echo will only be executed
days which are a Sunday AND a 31th, at 10:05.
.PP
\fBSee also\fR : options dayor, bootrun, runfreq,
mail, nolog, serial, lavg, nice, runas (see
below).
.PP
.SS "SOME EXAMPLES OF ENTRIES BASED ON TIME AND DATE"

.nf
# run mycommand at 12:05, 12:35, 13:05, 13:35, 
# 14:05 *and* 14:35 everyday 
&05,35 12-14 * * * mycommand -u me -o file 

# get mails every hour past 20, 21, 22, and 24 minutes. 
20-24~23 * * * * getmail 

# save our work of the day every night at 03:45 with a low priority 
# unless we are sunday, mail the output to jim and run that job 
# at startup if computer was down at 03:45
&nice(10),mailto(jim),bootrun 45 03 * * *~0 "save --our work" 
.fi
.SS "ENTRIES RUN PERIODICALLY"
.PP
The third type of \fBfcrontab\fR's entries begin by a "%",
followed by a keyword from one of 3 different lists, and optional options.
.SS "*LY KEYWORDS"
.PP
Those keywords are :
.PP
\fIhourly \fR, \fIdaily \fR, \fImonthly \fR, \fIweekly \fR
.PP
Those keywords tell \fBfcron\fR to run the command
once from the beginning of the corresponding time interval to the end of that
time interval. A time interval is, for example, the time from Monday 16:20 to Wednesday 01h43.
For instance, the keyword \fIweekly\fR tells \fBfcron\fR
to run a command once between Monday and Sunday each week.
.PP
With this two kind of keywords, user must give the needed time
fields (as defined in "Entries based on time
and date" (see above)) to specify when the command should be run during
each time interval :
.PP
"NEEDED TIME FIELDS FOR EACH KEYWORD"
Keywords : must be followed by the fields : \fI hourly\fR,
\fImidhourly\fR :  minutes.\fI daily\fR,
\fImiddaily\fR, \fInightly\fR,
\fIweekly\fR, \fImidweekly\fR :  minutes and hours.\fI monthly\fR,
\fImidmonthly\fR :  minutes, hours and days.
.SS "MID*LY KEYWORDS"
.PP
They are similar to the "*ly" ones :
.PP
\fImidhourly \fR, \fImiddaily \fR, \fInightly \fR, \fImidmonthly \fR, \fImidweekly \fR
.PP
They work exactly has the "*ly" keywords, except
that the time intervals are defined from middle to middle of the corresponding
"*ly" intervals : \fImidweekly\fR will run a command once from
Thursday to Wednesday. Note that \fInightly\fR is equivalent to
\fImiddaily\fR.
.PP
For example :
.PP

.nf
%nightly,mail(no) * 21-23,3-5 echo "a nigthly entry"
.fi
.PP
will run the command once each night either between 21:00 and
23:59, or between 3:00 and 5:59 (it will run as soon as possible. To change
that, use option random) and won't send mail (due to the optional use of
option mail).
.PP
\fBSee also\fR : options lavg, noticenotrun, strict,
mail, nolog, serial, nice, runas, random (see
below).
.SS "*S KEYWORDS"
.PP
They are :
.PP
\fImins \fR, \fIhours \fR, \fIdays \fR, \fImons \fR, \fIdow \fR
.PP
Those keywords act differently, as
follows:
.PP
run this command once during EACH time interval specified, ignoring
the fields below the keyword in the time interval definition (a
\fIhours\fR prevents the mins field to be considered as a time
interval, but it will be used to determine when the line should be run during an
interval : see the note below) (\fIdow\fR means "day of
week").
.PP
Such a keyword is followed by 5 time and date fields (the same
fields used for a line based on absolute
time (see above)). Furthermore, there must be some non-matching time and
dates in the lines with that kind of keyword (i.e. the following is not allowed
: 

.nf
%hours * 0-23 * * * echo "INCORRECT line !"
.fi
but 

.nf
%hours * 0-22 * * * echo "Ok."
.fi
is
allowed).
.sp
.RS
.B "Note:"
.PP
a single number in a field is considered as a time interval :

.nf
%mins 15 2-4 * * * echo
.fi
will run at 2:15, 3:15
AND 4:15 every day.
.PP
But all fields below the keywords are ignored in time
interval definition : 

.nf
%hours 15 2-4 * * * echo
.fi
will run only ONCE either at 2:15, 3:15 OR 4:15.
.RE
.PP
\fBSee also\fR : option random (see below).
.SS "OPTIONS"
.PP
The options can be set either for every line below the
declaration or for an individual line. In the first case, the setting is done on
a whole line immediately after an exclamation mark (!), while it is done after a
"&", a "%" or a "@" depending on the type of scheduling in the second case. Note
that an option declaration in a schedule overrides the global declaration of
that same option.
.PP
Options are separated by commas (,) and their arguments, if
any, are placed in parentheses ("(" and ")") and separated by commas. No spaces
are allowed. A declaration of options is of the form
.sp
.RS
.PP
\fIoption\fR[(\fIarg1\fR[,\fIarg2\fR][...])][,\fIoption\fR[(\fIarg1\fR[...])]][...]
.RE
.PP
where option is either the name of an option or its
abbreviation. The options are (default value in parentheses) :
"VALID OPTIONS IN A FCRONTAB"
.TP
\fBbootrun\fR
.TP
\fBb\fR
\fBboolean\fR(false)

Run a &-line at \fBfcron\fR's startup if it should
have be run during system down time.
.TP
\fBdayand\fR
\fBboolean\fR(true)

Perform a logic AND between week and month
day.

\fBSee also\fR : options dayor.
.TP
\fBdayor\fR
\fBboolean\fR(false)

Perform a logic OR between week and month
day.

\fBSee also\fR : options dayand.
.TP
\fBexesev\fR
\fBboolean\fR(false)

Can a job be executed several times simultaneously
?

\fBSee also\fR : options serialonce,
lavgonce.
.TP
\fBfirst\fR
.TP
\fBf\fR
\fBtime-value\fR

Delay before first execution of a job based on
system up time ("@"-lines). Useful in the following case : you have several jobs
running, say, every hour. By setting different first value for each job, you can
avoid them to run simultaneously everytime. You can also set it to 0, which is
useful when used in conjunction with option volatile.
.TP
\fBforcemail\fR
\fBboolean\fR(false)

Mail output even if zero-length.

\fBSee also\fR : options mail, mailto,
nolog.
.TP
\fBlavg\fR
\fBreal\fR(0) 
\fBreal\fR(0)
\fBreal\fR(0)

Set the values of the 1, 5 and 15-minute (in this
order) system load average values below which the job should run. The values
have a maximum of 1 decimal (i.e. "2.3"), any other decimals are only used to
round off. Set a value to 0 to ignore the corresponding load average (or all of
the values to run the job regardless of the load average).

\fBSee also\fR : options lavg1, lavg5,
lavg15, until, lavgonce, lavgor, lavgand, strict,
noticenotrun.
.TP
\fBlavg1\fR
.TP
\fBlavg5\fR
.TP
\fBlavg15\fR
\fBreal\fR(0)

Set the threshold of, respectively, the 1, 5 or 15
minutes system load average value. Set one of them to 0 to ignore the
corresponding load average.

\fBSee also\fR : options lavg.
.TP
\fBlavgand\fR
\fBboolean\fR(true)

Perform a logic AND between the 1, 5 and 15
minutes system load average values.

\fBSee also\fR : options lavg, lavgor.
.TP
\fBlavgonce\fR
\fBboolean\fR(1)

Can a job be queued several times in lavg queue
simultaneously ?

\fBSee also\fR : options lavg.
.TP
\fBlavgor\fR
\fBboolean\fR(false)

Perform a logic OR between the 1, 5 and 15 minutes
system load average values.

\fBSee also\fR : options lavg, lavgand.
.TP
\fBmail\fR
.TP
\fBm\fR
\fBboolean\fR(true)

Mail output (if any) or not.

\fBSee also\fR : options mailto, forcemail,
nolog.
.TP
\fBmailto\fR
\fBuser-name\fR(name 
of file's owner)

Mail output (if needed) to
"\fIuser-name\fR". A mailto declared and empty (string
"") is equivalent to "mail(false)".

\fBSee also\fR : options mail, forcemail,
nolog.
.TP
\fBnice\fR
.TP
\fBn\fR
\fBnice-value\fR

Change job priority. A
\fBnice-value\fR is an integer from -20 (highest
priority) to 19 (lowest) (only root is allowed to use a negative value with this
option).
.TP
\fBnolog\fR
\fBboolean\fR(false)

If set to true, log only errors for the
corresponding job(s). May be useful for jobs running very often, and/or to
reduce disk access on a laptop.

\fBSee also\fR : options mail, mailto,
forcemail.
.TP
\fBnoticenotrun\fR
\fBboolean\fR(false)

Should \fBfcron\fR mail user to report the
non-execution of a %-job or a &-job ? (because of system down state for both or
a too high system load average for the latter)

\fBSee also\fR : options lavg, strict.
.TP
\fBrandom\fR
\fBboolean\fR(false)

In a line run
periodically, this option answers the question : should this job be run
as soon as possible in its time interval of execution (safer), or should fcron set a
random time of execution in that time interval ? Note that if this option is set, the
job may not run if fcron is not running during \fBall\fR the
execution interval. Besides, you must know that the random scheme may be quite
easy to guess for skilled people.
.TP
\fBreset\fR
\fBboolean\fR

Reset all the options to default.
.TP
\fBrunas\fR
\fBuser-name\fR

Run with "\fIuser-name\fR"
permissions and environment (only root is allowed to use this option).
.TP
\fBrunfreq\fR
.TP
\fBr\fR
\fBinteger\fR

Run every "\fIrunfreq\fR"
matches of time and date. (this option is ignored for lines based on elapsed system up time).
.TP
\fBserial\fR
.TP
\fBs\fR
\fBboolean\fR(false)

\fBFcron\fR runs at most 1 serial
jobs (and the same number of lavg serial jobs) simultaneously (but this value
may be modified by \fBfcron\fR's option \fB-m\fR). May be used with big
jobs to limit system overload.

\fBSee also\fR : options serialonce,
lavg.
.TP
\fBserialonce\fR
\fBboolean\fR(0)

Can a job be queued several times in serial queue
simultaneously ?

\fBSee also\fR : options exesev,
lavgonce.
.TP
\fBstdout\fR
\fBboolean\fR(false)

If fcron is running in the forground, then also
let jobs print to stderr/stdout instead of mailing or discarding it.

\fBSee also\fR : fcron's option \fB--once\fR
in \fBfcron\fR(8).
.TP
\fBstrict\fR
\fBboolean\fR(true)

When a lavg %-job is at the end of a time interval of
execution, should it be removed from the lavg queue (strict(true), so the job is
not run) or be let there until the system load average allows its execution
(strict(false)) ?

\fBSee also\fR : options lavg,
noticenotrun.
.TP
\fBtzdiff\fR
\fBinteger\fR(0)

Time zone difference (in hours, between -24 and
24) between the system time, and the local real time. This option allows a user
to define its & and %-lines in the local time. Note that this value is set for a
whole fcrontab file, and only the last definition is taken into account.

\fBSee also\fR : options lavg, strict.
.TP
\fBuntil\fR
\fBtime-value\fR(0)

Set the timeout of the waiting of the wanted
system load average values. If the timeout is exceeded, the job runs no matter
the load average. Set until to 0 to remove the timeout.

\fBSee also\fR : options lavg.
.TP
\fBvolatile\fR
\fBboolean\fR(false)

When set to true, the job is based on a "volatile"
system up time, i.e. restart counting each time fcron is started, which is
useful when fcron is started by a script running only, for instance, during a
dialup connection : the "volatile" system up time then refers to the dialup
connection time. You may also want to use option first if you use fcron
that way.

\fBSee also\fR : options first, stdout, lines based on elapsed system up time, fcron's option
\fB--once\fR in \fBfcron\fR(8).
.PP
A \fBboolean\fR argument can be non-existent, in which
case parentheses are not used and it means true; the string
"true", "yes" or 1 to mean true; and the string "false",
"no" or 0 to mean false. See above for explanations about
time value (section "entries based on elapsed system up
time").
.PP
Note that dayand and
dayor are in fact the same option : a false value to
dayand is equivalent to a true to dayor,
and reciprocally a false value to dayor is equivalent a true
value to dayand. It is the same for
lavgand and lavgor.
.PP
Note a special case to be handled : A job should be entered
into the serial queue, *but* the previous entry for this job has not been
completed yet, because of high system load or some external event. Option
serialonce answers the question : should the new entry of the
job be ignored ? This way one can distinguish between jobs required to run a
certain number of times, preferably at specified times, and tasks to be
performed irrespective of their number (-> serialonce(true)), which make the
system respond faster.
.PP
The same considerations apply for the load average queue, and
can be expressed with option lavgonce.
.PP
Moreover, if the serial or the lavg queue contains
respectively more than 30 and 30 jobs, any new job is
refused and not run to avoid an overwhelming of system resources. In this case,
an error message is logged through syslog.
.PP
Finally, if jobs remain in the lavg or serial queues when
fcron stops, they will be put once in the corresponding queue on startup (their
order may not be conserved).
.PP
.SS "AN EXAMPLE OF AN OPTION DECLARATION :"

.nf
!reset,serial(true),dayor,bootrun(0),mailto(root),lavg(.5,2,1.5)
.fi
.SH "EXAMPLES"
.PP
.SS "AN EXAMPLE OF A USER FCRONTAB"

.nf
# use /bin/bash to run commands, ignoring what /etc/passwd says 
SHELL=/bin/bash

# mail output to thib, no matter whose fcrontab this is 
!mailto(thib) 

# define a variable which is equivalent to " Hello thib and paul ! " 
# here the newline characters are escaped by a backslash (\\) 
# and quotes are used to force to keep leading and trailing blanks 
TEXT= " Hello\\
 thib and\\
 paul ! " 

# we want to use serial but not bootrun: 
!serial(true),b(0) 

# run after five minutes of execution the first time, 
# then run every hour 
@first(5) 1h   echo "Run every hour" 

# run every day 
@ 1d echo "fcron daily" 

# run once between in the morning and once in the afternoon 
#  if systems is running at any moment of these time intervals
%hours * 8-12,14-18 * * * echo "Hey boss, I'm working today !" 

# run once a week during our lunch 
%weekly * 12-13 echo "I left my system on at least once \\
 at lunch time this week." 

# run every Sunday and Saturday at 9:05
5 9 * * sat,sun echo "Good morning Thibault !" 

# run every peer days of march at 18:00, except on 16th 
0 18 2-30/2~16 Mar * echo "It's time to go back home !" 

# the line above is equivalent to 
& 0 18 2-30/2~16 Mar * echo "It's time to go back home !" 

# reset options to default and set runfreq for lines below 
!reset,runfreq(7) 

# run once every 7 matches (thanks to the declaration above), 
# so if system is running every day at 10:00, this will be 
# run once a week 
& 0 10 * * * echo "if you got this message last time 7 days ago,\\
 this computer has been running every day at 10:00 last week.\\
 If you got the message 8 days ago, then the system has been down \\
 one day at 10:00 since you got it, etc" 

# wait every hour for a 5 minutes load average under 0.9 
@lavg5(0.9) 1h echo "The system load average is low" 

# wait a maximum of 5 hours every day for a fall of the load average
@lavgand,lavg(1,2.0,3.0),until(5h) 1d echo "Load average is going down" 

# wait for the best moment to run a heavy job 
@lavgor,lavg(0.8,1.2,1.5),nice(10) 1w echo "This is a heavy job" 

# run once every night between either 21:00 and 23:00 or 
#   between 3:00 and 6:00 
%nightly,lavg(1.5,2,2) * 21-23,3-6 echo "It's time to retrieve \\
 the latest release of Mozilla !"
.fi
.SH "FILES"
.TP
\fB\fI/etc/fcron.conf\fB\fR
Configuration file for \fBfcron\fR, \fBfcrontab\fR and
\fBfcrondyn\fR : contains paths (spool dir, pid file) and default programs to use
(editor, shell, etc). See \fBfcron.conf\fR(5) for
more details.
.TP
\fB\fI/etc/fcron.allow\fB\fR
Users allowed to use \fBfcrontab\fR and \fBfcrondyn\fR (one
name per line, special name "all" acts for everyone)
.TP
\fB\fI/etc/fcron.deny\fB\fR
Users who are not allowed to use \fBfcrontab\fR and
\fBfcrondyn\fR (same format as allow file)
.TP
\fB\fI/etc/pam.d/fcron\fB (or \fI/etc/pam.conf\fB)\fR
PAM configuration file for
\fBfcron\fR. Take a look at pam(8) for more details.
.SH "SEE ALSO"

\fBfcrontab\fR(1)

\fBfcrondyn\fR(1)

\fBfcrontab\fR(5)

\fBfcron.conf\fR(5)

\fBfcron\fR(8)

If you're learning how to use fcron from scratch, I suggest
that you read the HTML version of the documentation (if your are not reading it
right now ! :) ) : the content is the same, but it is easier to navigate thanks
to the hyperlinks.
.SH "AUTHOR"
.PP
Thibault Godouet <fcron@free.fr>
